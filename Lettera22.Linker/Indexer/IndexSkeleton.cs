using Lettera22.Common;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Lettera22.Metadoc;
using Lettera22.HTML;

namespace Lettera22.Linker
{
    abstract class IndexSkeleton
    {
        /// <project>Lettera22</project>
        /// <copyright company="Claudio Tortorelli">
        /// Copyright (c) 2017 All Rights Reserved
        /// </copyright>        
        /// <author>Claudio Tortorelli</author>
        /// <email>claudio.tortorelli@gmail.com</email>
        /// <web>http://www.claudiotortorelli.it</web>
        /// <date>May 2017</date>
        /// <summary>
        /// </summary>
        /// https://choosealicense.com/licenses/mit/        
        protected string m_skHtml;
        protected SkeletonTags m_Tags;
        protected List<MetaDoc> m_TextWorks;
        protected Dictionary<string, string> m_TagValues;
        protected string m_ScriptFileName;

        public IndexSkeleton(List<MetaDoc> textWorks)
        {
            m_Tags = new SkeletonTags();
            m_TextWorks = textWorks;
            m_TagValues = new Dictionary<string, string>();

            m_ScriptFileName = "";

            InitTags();
            
            // utilizzare la sequenza di tags
            m_skHtml = @"
            [DOCTYPE]
            [HTMLOPEN]
            [HEADOPEN]
            [HEADTITLE]
            [META]
            [CSS]
            [SCRIPT]
            [HEADCLOSE]
            [BODYOPEN]
            [HEADER]
            [TITLE]
            [SUBTITLE]
            [OTHERINFO]
            [TABLEOPEN]
            [CONTENT]
            [TABLECLOSE]
            [FOOTER]
            [BODYCLOSE]            
            [HTMLCLOSE]
            ";
        }

        protected virtual void InitTags()
        {
            m_TagValues.Add(m_Tags.DocType(), "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n" + string.Format("<!-- This file is generated by {0} version {1} -->", Globals.SoftwareName(), Globals.SoftwareVersion()));
            m_TagValues.Add(m_Tags.HTMLOpen(), "<html xmlns=\"http://www.w3.org/1999/xhtml\">");
            m_TagValues.Add(m_Tags.HeadOpen(), "<head>");
            m_TagValues.Add(m_Tags.HeadTitle(), "");            
            m_TagValues.Add(m_Tags.Meta(), "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>");
            m_TagValues.Add(m_Tags.CSS(), "");
            m_TagValues.Add(m_Tags.Script(), "");
            m_TagValues.Add(m_Tags.HeadClose(), "</head>");
            m_TagValues.Add(m_Tags.BodyOpen(), "<body>");
            m_TagValues.Add(m_Tags.Header(), "");
            m_TagValues.Add(m_Tags.Title(), "");
            m_TagValues.Add(m_Tags.SubTitle(), "");
            m_TagValues.Add(m_Tags.OtherInfo(), "");
            m_TagValues.Add(m_Tags.TableOpen(), "");
            m_TagValues.Add(m_Tags.Content(), "");
            m_TagValues.Add(m_Tags.TableClose(), "</table>");
            m_TagValues.Add(m_Tags.Footer(), "");
            m_TagValues.Add(m_Tags.BodyClose(), "</body>");
            m_TagValues.Add(m_Tags.HTMLClose(), "</html>");
        }

        public string BuildIt()
        {
            m_skHtml = m_skHtml.Replace(m_Tags.DocType(), m_TagValues[m_Tags.DocType()]);
            m_skHtml = m_skHtml.Replace(m_Tags.HTMLOpen(), m_TagValues[m_Tags.HTMLOpen()]);
            m_skHtml = m_skHtml.Replace(m_Tags.HeadOpen(), m_TagValues[m_Tags.HeadOpen()]);
            m_skHtml = m_skHtml.Replace(m_Tags.HeadTitle(), m_TagValues[m_Tags.HeadTitle()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Meta(), m_TagValues[m_Tags.Meta()]);
            m_skHtml = m_skHtml.Replace(m_Tags.CSS(), m_TagValues[m_Tags.CSS()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Script(), m_TagValues[m_Tags.Script()]);
            m_skHtml = m_skHtml.Replace(m_Tags.HeadClose(), m_TagValues[m_Tags.HeadClose()]);
            m_skHtml = m_skHtml.Replace(m_Tags.BodyOpen(), m_TagValues[m_Tags.BodyOpen()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Header(), m_TagValues[m_Tags.Header()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Title(), m_TagValues[m_Tags.Title()]);
            m_skHtml = m_skHtml.Replace(m_Tags.SubTitle(), m_TagValues[m_Tags.SubTitle()]);
            m_skHtml = m_skHtml.Replace(m_Tags.OtherInfo(), m_TagValues[m_Tags.OtherInfo()]);
            m_skHtml = m_skHtml.Replace(m_Tags.TableOpen(), m_TagValues[m_Tags.TableOpen()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Content(), m_TagValues[m_Tags.Content()]);
            m_skHtml = m_skHtml.Replace(m_Tags.TableClose(), m_TagValues[m_Tags.TableClose()]);
            m_skHtml = m_skHtml.Replace(m_Tags.Footer(), m_TagValues[m_Tags.Footer()]);
            m_skHtml = m_skHtml.Replace(m_Tags.BodyClose(), m_TagValues[m_Tags.BodyClose()]);
            m_skHtml = m_skHtml.Replace(m_Tags.HTMLClose(), m_TagValues[m_Tags.HTMLClose()]);

            return m_skHtml;
        }

        public string GetScriptFileName() { return m_ScriptFileName; }

        public string GetScriptUrl()
        {
            if (Globals.IsFTPEnabled())
                return "./" + m_ScriptFileName;
            return m_ScriptFileName;            
        }
    }
}
