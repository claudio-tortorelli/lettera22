using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

using Lettera22.Common;
using System.Globalization;
using Lettera22.Metadoc;
using HtmlAgilityPack;

namespace Lettera22.HTML
{
    public class HTMLWriter
    {
        /// <project>Lettera22</project>
        /// <copyright company="Claudio Tortorelli">
        /// Copyright (c) 2016 All Rights Reserved
        /// </copyright>        
        /// <author>Claudio Tortorelli</author>
        /// <email>claudio.tortorelli@gmail.com</email>
        /// <web>http://www.claudiotortorelli.it</web>
        /// <date>Aug 2016</date>
        /// <summary>
        /// Takes a TextWork and wraps it inside a html5/css output
        /// </summary>
        /// https://choosealicense.com/licenses/mit/

        protected MetaDoc m_TextWork;
        protected List<string> m_BiblioRefs;

        public HTMLWriter(MetaDoc textWork)
        {
            m_TextWork = textWork;
            m_BiblioRefs = new List<string>();
        }

        public string GetOutFilePath()
        {            
            return String.Format("{0}{1}", Globals.HtmlWorkFolder(), GetOutFileName());
        }

        public string GetOutFileName()
        {            
            return String.Format("{0}{1}", Path.GetFileNameWithoutExtension(m_TextWork.GetFileName()), Globals.HTML_EXT);
        }

        public bool Save(string htmlFilePath = "", bool bDeleteExist = false, bool bIntroOnly = false)
        {
            if (htmlFilePath.Length == 0)
                htmlFilePath = GetOutFilePath();
        
            if (bDeleteExist && File.Exists(htmlFilePath))
                File.Delete(htmlFilePath);

            string comment = string.Format("This file is generated by {0} version {1}", Globals.SoftwareName(), Globals.SoftwareVersion());

            try
            {
                using (FileStream fs = new FileStream(htmlFilePath, FileMode.Create))
                {
                    using (StreamWriter sw = new StreamWriter(fs, new UTF8Encoding(false))) // write document as UTF-8 with Byte Order Mark
                    {
                        sw.WriteLine(WriteDocType());
                        sw.WriteLine(WriteComment(comment));                        
                        sw.WriteLine("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
                        sw.WriteLine(WriteHead());
                        sw.WriteLine(WriteBody(bIntroOnly));                        
                        sw.WriteLine("</html>");
                    }
                }
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return false;
            }
            return true;
        }

        protected string GetIndentStr(int indentLevel)
        {
            if (indentLevel <= 0)
                return "";

            string indent = "";
            for (int i = 0; i < indentLevel; i++)
                indent += "\t";
            return indent;
        }

        protected string WriteDocType()
        {
            string htmlStr = "";
            htmlStr += "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";
            return htmlStr;
        }

        protected string WriteComment(string comment)
        {
            try
            {
                string htmlStr = "";
                htmlStr += string.Format("<!-- {0} -->", comment);
                return htmlStr;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }

        protected string WriteHead()
        {
            try
            {
                int indentLevel = 1;
                string indentStr = GetIndentStr(indentLevel);
                string htmlStr = "";
                htmlStr += "<head>\n";
                htmlStr += (indentStr + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n"); // declare it is a UTF-8 document>");
                htmlStr += (indentStr + string.Format("<title>{0}</title>\n", m_TextWork.GetTitle()));
                htmlStr += (indentStr + CSSStyle.BuildStyle());
                htmlStr += "</head>";
                return htmlStr;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }

        protected string WriteBody(bool bIntroOnly)
        {
            try
            {
                int indentLevel = 1;
                string indentStr = GetIndentStr(indentLevel);

                string htmlStr = "";
                htmlStr += "<body>\n";
                htmlStr += WriteIntroData(bIntroOnly);
                if (!bIntroOnly)
                {
                    htmlStr += ExpandUnitsContent(m_TextWork.GetUnit());
                    htmlStr += WriteBibliography();
                }
                htmlStr += string.Format("<p class=\"footer\">Pubblicato con Lettera22 versione {0}</p>\n", Globals.SoftwareVersion());
                htmlStr += "</body>\n";
                return htmlStr;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }


        protected string WriteIntroData(bool bIntroOnly = false)
        {
            try
            {
                string intro = "";
                if (m_TextWork.GetHeader().Length > 0)
                {
                    intro += ("<h6 class=\"header\">" + m_TextWork.GetHeader() + "</h6>\n");
                    intro += "<hr/>\n";
                }
                if (m_TextWork.GetTitle().Length > 0)
                {
                    intro += ("<h1>" + m_TextWork.GetTitle() + "</h1>\n");
                    if (m_TextWork.GetSubTitle().Length > 0)
                        intro += ("<h3 class=\"subtitle\">" + m_TextWork.GetSubTitle() + "</h3>\n");                    
                }
                if (m_TextWork.GetAuthor().Length > 0)
                    intro += ("<p class=\"author\">di " + m_TextWork.GetAuthor() + "</p>\n");

                if (m_TextWork.GetPlace().Length > 0)
                    intro += ("<p class=\"place\">" + m_TextWork.GetPlace() + "</p>\n");

                
                string repData = "";
                if (m_TextWork.IsShowPublishDate())
                {
                    repData += ("Pubblicato il " + m_TextWork.GetCreationDate() + " - ");
                }

                if (m_TextWork.IsShowRebuildDate())
                {
                    string rebuildDate = "";
                    if (!bIntroOnly)
                    {
                        rebuildDate = DateTime.Now.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        rebuildDate = m_TextWork.GetLastRevisionDate();
                    }
                    repData += ("Ultima revisione il " + rebuildDate + " - ");
                }

                if (m_TextWork.IsShowRevision())
                    repData += ("Revisione n. " + m_TextWork.GetRevision());

                if (repData.Length > 0)
                {
                    if (repData.EndsWith(" - "))
                        repData = repData.Substring(0, repData.Length - 3);

                    intro += ("<p class=\"republishData\">" + repData + "</p>\n");
                }

                if (Globals.GetMainUrl().Length > 0 || m_TextWork.GetHashes().Count > 0)
                {
                    string space = "";
                    intro += "<p>";
                    if (Globals.GetMainUrl().Length > 0)
                    {
                        string siteName = Globals.GetMainUrl().Replace("http://", "");
                        siteName = siteName.Replace("https://", "");
                        intro += ("Torna a <a href=\"" + Globals.GetMainUrl() + "\">" + siteName + "</a>");
                        space = " -- ";
                    }
                    if (m_TextWork.GetHashes().Count > 0 && Globals.IsShowPreviousVersion())
                    {
                        string previousVersionUrl = m_TextWork.GetHashes()[0].GetGlobalUrl();
                        intro += string.Format("{1}<a href=\"{0}\">Revisione precedente</a>", previousVersionUrl, space);
                    }
                    intro += "</p>";
                }
                
                if (intro.Length > 0)
                    intro += "<br/><hr/>\n";

                if (m_TextWork.GetAbstract().Length > 0)
                    intro += ("<div style=\"text-align:center; margin-top:25px;\"><b>Abstract</b></div>\n<p class=\"abstract\">" + m_TextWork.GetAbstract() + "</p>\n");

                if (m_TextWork.IsSummaryEnabled())
                {
                    string summary = "<div style=\"text-align:center; margin-top:40px;\"><a name=\"index\"></a><b>Indice</b></div>\n";
                    if (m_TextWork.GetIntro().Length > 0)
                        summary += "<p class=\"summary\"><b>Introduzione</b><br/>\n";
                    else
                        summary += "<p class=\"summary\">\n";
                    summary += ExpandSummary(m_TextWork.GetUnit());
                    if (m_TextWork.HasLinks(null))
                        summary += "<a href=\"#riferimenti\" class=\"summarylink\"><b>Bibliografia</b></a><br/>";
                    summary += "</p>\n";
                    intro += summary;
                }

                if (m_TextWork.GetDedication().Length > 0)
                    intro += ("<hr class=\"styleSep\"><p class=\"dedication\">" + m_TextWork.GetDedication() + "</p>\n");                
                
                if (m_TextWork.GetIntro().Length > 0)
                    intro += ("<h2 style=\"margin-top:40px;\">Introduzione</h2>\n<p class=\"indent\">" + m_TextWork.GetIntro() + "</p>\n");
                                
                if (intro.Length > 0)
                    intro += "<br/>\n";

                return intro;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }

        protected string ExpandUnitsContent(Unit unit, string number = "", int unitNum = 0)
        {
            if (unit == null)
                return "";

            try
            {
                string unitText = "";

                if (unit.IsTitleVisible())
                {
                    string unitTitle = unit.GetTitle();
                    if (m_TextWork.IsShowUnitNumber() && unitNum > 0 && unit.IsTitleNumerable())
                    {
                        if (number.Length > 0)
                            number += string.Format(".{0}", unitNum);
                        else
                            number += string.Format("{0}", unitNum);
                        unitTitle = (number + " " + unitTitle);
                    }

                    string summaryAnchor = "";
                    if (unit.IsVisibleInSummary())
                        summaryAnchor = "<a name=\"" + string.Format("{0}", unit.GetId()) + "\"></a>";

                    switch (unit.GetLevel())
                    {
                        case 1:
                        {
                            unitText += ("<h2>" + summaryAnchor + unitTitle + "</h2>\n");
                            break;
                        }
                        case 2:
                        {
                            unitText += ("<h3>" + summaryAnchor + unitTitle + "</h3>\n");
                            break;
                        }
                        case 3:
                        {
                            unitText += ("<h4>" + summaryAnchor + unitTitle + "</h4>\n");
                            break;
                        }
                        case 4:
                        {
                            unitText += ("<h5>" + summaryAnchor + unitTitle + "</h5>\n");
                            break;
                        }
                        case 5:
                        {
                            unitText += ("<h6>" + summaryAnchor + unitTitle + "</h6>\n");
                            break;
                        }
                        default:
                        {
                            unitText += ("<h6>" + summaryAnchor + unitTitle + "</h6>\n");
                            break;
                        }
                    }
                    if (unit.IsVisibleInSummary())
                        unitText += ("<p class=\"returnIndex\"><a href=\"#index\">[indice]</a></p>\n");
                }
                
                for (int idContent = 0; idContent < unit.GetContentCount(); idContent++)
                {
                    Content content = unit.GetContentByPos(idContent);
                    if (content == null)
                        continue;
                    List<string> allowedTags = new List<string>();
                    if (content.GetType() == typeof(Paragraph))
                    {
                        string paragraph = "";
                        if (((Paragraph)content).GetContent().Length < Globals.PARAGRAPH_LINE_CHARS)
                            paragraph += "<p>\n";
                        else
                            paragraph += "<p class=\"indent\">\n";

                        
                        allowedTags.Add("<b>");
                        allowedTags.Add("</b>");
                        allowedTags.Add("<i>");
                        allowedTags.Add("</i>");

                        string contentText = Utils.EscapeHTMLTags(((Paragraph)content).GetContent(), allowedTags);
                        contentText = contentText.Replace("\n", "<br/>");
                        contentText = contentText.Replace("||", "<br/>");
                                                
                        // biblio reference and attachments - start
                        int parId = ((Paragraph)content).GetId();
                        int nParagraphRefs = 0;
                        for (int idSubContent = 0; idSubContent < unit.GetContentCount(); idSubContent++)
                        {
                            Content subContent = unit.GetContentByPos(idSubContent);
                            if (subContent == null)
                                continue;
                            if (subContent.GetType() == typeof(BiblioRef))
                            {
                                BiblioRef curLink = (BiblioRef)subContent;
                                if (parId != curLink.GetContentId())
                                    continue;
                                nParagraphRefs++;
                            } 
                            else if (subContent.GetType() == typeof(Attachment))
                            {
                                Attachment curLink = (Attachment)subContent;
                                if (parId != curLink.GetContentId())
                                    continue;
                                nParagraphRefs++;
                            }
                        }

                        // expand link into html content storing them in the links array
                        int parRefCount = 0;
                        int nRefAddedBeforeParagraph = m_BiblioRefs.Count;
                        
                        List<string> reversedRefs = new List<string>();
                        for (int idSubContent = unit.GetContentCount() - 1; idSubContent >= 0; idSubContent--) // reverse order
                        {
                            Content subContent = unit.GetContentByPos(idSubContent);
                            if (subContent == null)
                                continue;
                            string reference = "";
                            if (subContent.GetType() == typeof(BiblioRef))
                            {
                                BiblioRef curRef = (BiblioRef)subContent;
                                if (parId != curRef.GetContentId())
                                    continue;
                                parRefCount++;

                                reference = curRef.GetContent();
                                int parPos = curRef.GetPos();
                                int globalIndex = nRefAddedBeforeParagraph + (nParagraphRefs - parRefCount + 1);

                                string preLink = contentText.Substring(0, parPos);
                                string postLink = contentText.Substring(parPos);
                                contentText = string.Format("{0}<a name=\"backlink{1}\"></a><a href=\"#link{2}\">[{3}]</a>{4}", preLink, globalIndex, globalIndex, globalIndex, postLink);
                                reversedRefs.Add(reference); 
                            }
                            else if (subContent.GetType() == typeof(Attachment))
                            {
                                Attachment curAtt = (Attachment)subContent;
                                if (parId != curAtt.GetContentId())
                                    continue;
                                parRefCount++;

                                reference = curAtt.GetContent();
                                int parPos = curAtt.GetPos();
                               
                                string preLink = contentText.Substring(0, parPos);
                                string postLink = contentText.Substring(parPos);
                                string attUrl = Globals.GetMainUrl().TrimEnd('/') + curAtt.GetRelativePath();

                                contentText = string.Format("{0}<a href=\"{1}\" target=\"_blank\"\" class=\"attach\">{2}</a>{3}", preLink, attUrl, curAtt.GetAttachmentName(), postLink);
                            }                            
                        }
                        for (int iUrl = reversedRefs.Count-1; iUrl >= 0; iUrl-- )
                            m_BiblioRefs.Add(reversedRefs[iUrl]);
                        // biblio reference - end

                        paragraph += contentText;
                        paragraph += "</p>\n";
                        unitText += paragraph;
                    }
                    else if (content.GetType() == typeof(Quote))
                    {
                        unitText += "<blockquote>\n";
                        string contentText = Utils.EscapeHTMLTags(((Quote)content).GetContent());
                        unitText += contentText.Replace("\n", "<br/>");
                        unitText += "</blockquote>\n";
                    }
                    else if (content.GetType() == typeof(MetaImage))
                    {
                        string contentText = (((MetaImage)content).GetBase64Content());
                        if (contentText.Length > 0)
                            unitText += string.Format("<img class=\"center\" src=\"data:image/jpeg;base64,{0}\"/>\n", contentText);
                    }
                    else if (content.GetType() == typeof(ItemList))
                    {
                        // open list item
                        allowedTags.Add("<li>");
                        allowedTags.Add("</li>");
                        allowedTags.Add("<b>");
                        allowedTags.Add("</b>");
                        allowedTags.Add("<i>");
                        allowedTags.Add("</i>");
                        bool bOrdered = ((ItemList)content).IsOrdered();
                        if (bOrdered)                            
                            unitText += "<ol class=\"orderedList\">\n";
                        else
                            unitText += "<ul class=\"unorderedList\">\n";

                        for (int idSubContent = idContent; idSubContent < unit.GetContentCount(); idSubContent++)
                        {
                            content = unit.GetContentByPos(idSubContent);
                            if (content == null)
                                continue;
                            if (content.GetType() == typeof(ItemList))
                            {
                                string contentText = Utils.EscapeHTMLTags(((ItemList)content).GetContent(), allowedTags);

                                unitText += contentText;
                                idContent++;
                                if (idContent == unit.GetContentCount())
                                {
                                    // close the list if itemlist is the last content in the unit (#34)
                                    if (bOrdered)
                                        unitText += "</ol>\n";
                                    else
                                        unitText += "</ul>\n";
                                    idContent--;
                                }
                            }
                            else
                            {
                                if (bOrdered)
                                    unitText += "</ol>\n";
                                else
                                    unitText += "</ul>\n";
                                idContent--;
                                break;
                            }
                        }
                        // close list item
                    }                   
                }

                int iNextUnit = 1;
                int subUnitCount = unit.GetUnitCount();
                for (int iUnit = 0; iUnit < subUnitCount; iUnit++)
                {
                    unitText += ExpandUnitsContent(unit.GetUnitByPos(iUnit), number, iNextUnit);
                    Unit subUnit = unit.GetUnitByPos(iUnit);
                    if (subUnit.IsTitleNumerable())
                        iNextUnit++;
                }
                return unitText;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }

        public string ExpandSummary(Unit unit, string number = "", int unitNum = 0)
        {
            if (unit == null)
                return "";

            try
            {
                string summary = "";
                if (unit.IsTitleNumerable())
                {
                    string unitTitle = unit.GetTitle();
                    if (m_TextWork.IsShowUnitNumber() && unitNum > 0)
                    {
                        if (number.Length > 0)
                            number += string.Format(".{0}", unitNum);
                        else
                            number += string.Format("{0}", unitNum);
                        unitTitle = (number + " " + unitTitle);
                    }

                    if (unit.GetLevel() == 1)
                        summary += "<b><a class=\"summarylink\" href=\"#" + string.Format("{0}", unit.GetId()) + "\">" + unitTitle + "</a></b><br/>\n";
                    else
                        summary += "&nbsp;&nbsp;&nbsp;<a class=\"summarylink\" href=\"#" + string.Format("{0}", unit.GetId()) + "\">" + unitTitle + "</a><br/>\n";                 
                }

                int iNextUnit = 1;
                int subUnitCount = unit.GetUnitCount();
                for (int iUnit = 0; iUnit < subUnitCount; iUnit++)
                {
                    summary += ExpandSummary(unit.GetUnitByPos(iUnit), number, iNextUnit);
                    Unit subUnit = unit.GetUnitByPos(iUnit);
                    if (subUnit.IsTitleNumerable())
                        iNextUnit++;
                }

                return summary;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return "";
            }
        }

        protected string WriteBibliography()
        {
            if (m_BiblioRefs == null || m_BiblioRefs.Count == 0)
                return "";

            string refs = "";
            refs += "<hr width=\"70%\" align=\"left\">\n";
            refs += "<h2>Bibliografia</h2><a name=\"bibliografia\">\n";
            for (int iRef = 0; iRef < m_BiblioRefs.Count; iRef++)
            {
                string br = "";
                if (iRef < m_BiblioRefs.Count - 1)
                    br = "<br>";
                refs += string.Format("<a name=\"link{0}\">[<a href=\"#backlink{1}\">{2}</a>]</a> {3} {4}\n", iRef + 1, iRef + 1, iRef + 1, m_BiblioRefs[iRef], br);

            }
            refs += ("<p class=\"returnIndex\"><a href=\"#index\"><br>[indice]</a></p>\n");
            return refs;
        }

        // http://stackoverflow.com/questions/7519751/validating-html-tags-in-a-string-in-c-sharp
        public bool ValidateHTML(string htmlFilePath = "")
        {
            if (htmlFilePath.Length == 0)
                htmlFilePath = GetOutFilePath();

            if (!File.Exists(htmlFilePath))
                return false;

            try
            {
                var htmlDoc = new HtmlDocument();

                string[] lines = File.ReadAllLines(htmlFilePath);
                string totHTML = "";
                foreach (string str in lines)
                {
                    totHTML += str;
                }

                htmlDoc.LoadHtml(totHTML);
                if (htmlDoc.ParseErrors.Count() == 0)
                    return true;

                foreach (var error in htmlDoc.ParseErrors)
                    Globals.m_Logger.Error(string.Format("HTML validation - err. {0}: {1}", error.Code, error.Reason));
                return false;
            }
            catch (Exception ex)
            {
                Globals.m_Logger.Error(ex.ToString());
                return false;
            }
        }
    }
}

